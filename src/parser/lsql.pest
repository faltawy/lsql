// LSQL Grammar - SQL-like syntax for querying files and directories
// Whitespace and comments
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT    = _{ "--" ~ (!"\n" ~ ANY)* ~ "\n"? }
SEMICOLON  = _{ ";" }
// Keywords
SELECT    = _{ "select" }
FROM      = _{ "from" }
WHERE     = _{ "where" }
LIMIT     = _{ "limit" }
DELETE    = _{ "delete" }
RECURSIVE = _{ "recursive" | "r" }
ORDER     = _{ "order" }
BY        = _{ "by" }
ASC       = _{ "asc" }
DESC      = _{ "desc" }
FIRST     =  { "first" }
MANY      =  { "many" }

// Main query structure
query = { (select_query | delete_query) ~ SEMICOLON? ~ EOI? }

// SELECT query
select_query = { select_clause ~ from_clause ~ where_clause? ~ order_by_clause? ~ limit_clause? }

// DELETE query
delete_query = { delete_clause ~ from_clause ~ where_clause? ~ limit_clause? }

// SELECT clause - what to select (files, directories, or both)
select_clause  = { SELECT ~ selection }
delete_clause  = { DELETE ~ recursive_flag? ~ delete_selection }
recursive_flag = { RECURSIVE }
limit_clause   = { LIMIT ~ number }

// Selection for SELECT queries
selection = {
    "*"
  | field_list // specific fields
}

// Selection for DELETE queries
delete_selection = {
    FIRST ~ number? // Delete first N matches (default 1)

  | MANY ~ number? // Delete many matches (with optional limit)

  | "*" // Keep * for backward compatibility
}

field_list = { field ~ ("," ~ field)* }
field      = {
    "name"
  | "path"
  | "size"
  | "modified"
  | "created"
  | "ext"
  | "permissions"
  | "owner"
  | "is_hidden"
  | "is_readonly"
  | "type"
}

// ORDER BY clause
order_by_clause = { ORDER ~ BY ~ order_term ~ ("," ~ order_term)* }
order_term      = { field ~ order_direction? }
order_direction = { ASC | DESC }

// FROM clause - where to search
from_clause =  { FROM ~ path }
path        = @{ "\"" ~ (!("\"") ~ ANY)* ~ "\"" | (!(WHITESPACE | ";" | WHERE | ORDER) ~ ANY)+ }

// WHERE clause - conditions for filtering
where_clause      = { WHERE ~ condition }
condition         = {
    primary_condition ~ (boolean_operator ~ primary_condition)*
}
primary_condition = {
    "(" ~ condition ~ ")"
  | comparison
}
comparison        = { identifier ~ comparison_operator ~ value }
identifier        = { "name" | "path" | "size" | "modified" | "created" | "ext" | "permissions" | "owner" | "is_hidden" | "is_readonly" | "type" }
// The ordering is important - check for multi-character operators first
comparison_operator =  {
    "<="
  | ">="
  | "="
  | "!="
  | "<"
  | ">"
  | "like"
  | "contains"
}
value               = @{ string | number | bool }
string              = @{ "\"" ~ (!("\"") ~ ANY)* ~ "\"" }
number              = @{ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? ~ size_unit? }
size_unit           =  { "kb" | "mb" | "gb" | "tb" | "b" }
bool                =  { "true" | "false" }
boolean_operator    =  { "and" | "or" }
