name: Rust CI

on:
  push:
    

env:
  CARGO_TERM_COLOR: always
  RUST_VERSION: stable

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        target: [
          { rust: x86_64-unknown-linux-gnu, os: ubuntu-latest },
          { rust: x86_64-pc-windows-msvc, os: windows-latest }
        ]
    
    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v4

    # Install Rust
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ env.RUST_VERSION }}
        targets: ${{ matrix.target.rust }}

    # Cache Rust dependencies
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    # Install cross-compilation tools for Linux
    - name: Install cross
      if: matrix.os == 'ubuntu-latest'
      run: cargo install cross --locked

    # Build for Linux
    - name: Build (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: cross build --target ${{ matrix.target.rust }} --release

    # Build for Windows
    - name: Build (Windows)
      if: matrix.os == 'windows-latest'
      run: cargo build --target ${{ matrix.target.rust }} --release

    # Run tests
    - name: Run tests
      run: cargo test --target ${{ matrix.target.rust }} --release

    # Create artifacts directory
    - name: Prepare artifacts
      run: |
        mkdir -p artifacts
        cp target/${{ matrix.target.rust }}/release/my-cli* artifacts/
      shell: bash

    # Upload artifacts
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.target.rust }}-binaries
        path: artifacts/
        retention-days: 5

  # Optional: Create a release on tag push
  release:
    needs: build-and-test
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/*-binaries/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}