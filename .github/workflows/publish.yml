name: Build and Test

on:
  push:

env:
  CARGO_TERM_COLOR: always
  RUST_VERSION: stable

jobs:
  build-and-test:
    name: Build and Test (${{ matrix.target.rust }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-2019]
        target:
          - { rust: x86_64-unknown-linux-gnu, os: ubuntu-latest }
          - { rust: x86_64-pc-windows-msvc, os: windows-2019 }
        exclude:
          - os: ubuntu-latest
            target: { rust: x86_64-pc-windows-msvc }
          - os: windows-2019
            target: { rust: x86_64-unknown-linux-gnu }

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ env.RUST_VERSION }}
        targets: ${{ matrix.target.rust }}

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install cross (Linux only)
      if: matrix.os == 'ubuntu-latest'
      run: cargo install cross --locked

    - name: Setup MSVC Environment (Windows only)
      if: matrix.os == 'windows-2019'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Build (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: cross build --target ${{ matrix.target.rust }} --release

    - name: Build (Windows)
      if: matrix.os == 'windows-2019'
      run: cargo build --target ${{ matrix.target.rust }} --release

    - name: Run tests
      run: cargo test --target ${{ matrix.target.rust }} --release

    - name: Prepare artifacts
      run: |
        mkdir -p artifacts
        cp target/${{ matrix.target.rust }}/release/lsql* artifacts/
      shell: bash

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.target.rust }}-binaries
        path: artifacts/
        retention-days: 5

  release:
    needs: build-and-test
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/*-binaries/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}