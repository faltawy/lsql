name: Build, Test and Release

on:
  push:
    branches:
      - master

permissions:
  contents: write
  issues: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always
  RUST_VERSION: stable

jobs:
  semantic-versioning:
    name: Determine version
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.semantic.outputs.new_release_version }}
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      changelog: ${{ steps.semantic.outputs.changelog }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: 24
          tag_format: v${version}
          branch: master
          extra_plugins: |
            @semantic-release/commit-analyzer
            @semantic-release/release-notes-generator
            @semantic-release/changelog
            @semantic-release/git
            @semantic-release/github
            conventional-changelog-conventionalcommits
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-test:
    name: Build and Test (${{ matrix.target.rust }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-2019]
        target:
          - { rust: x86_64-unknown-linux-gnu, os: ubuntu-latest }
          - { rust: x86_64-pc-windows-msvc, os: windows-2019 }
        exclude:
          - os: ubuntu-latest
            target: { rust: x86_64-pc-windows-msvc }
          - os: windows-2019
            target: { rust: x86_64-unknown-linux-gnu }

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ env.RUST_VERSION }}
        targets: ${{ matrix.target.rust }}

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target.rust }}-${{ matrix.os }}

    - name: Install cross (Linux only)
      if: matrix.os == 'ubuntu-latest'
      run: cargo install cross --locked

    - name: Setup MSVC Environment (Windows only)
      if: matrix.os == 'windows-2019'
      uses: microsoft/setup-msbuild@v1.3

    - name: Build
      run: cargo build --target ${{ matrix.target.rust }} --release

    - name: Run tests
      run: cargo test --target ${{ matrix.target.rust }} --release

    - name: List artifacts (Debug)
      run: |
        ls -la target/${{ matrix.target.rust }}/release/
      if: matrix.os == 'ubuntu-latest'
      
    - name: List artifacts (Debug - Windows)
      run: |
        dir target\${{ matrix.target.rust }}\release\
      if: matrix.os == 'windows-2019'

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.target.rust }}-binaries
        path: |
          target/${{ matrix.target.rust }}/release/lsql
          target/${{ matrix.target.rust }}/release/lsql.exe
        if-no-files-found: warn

  release:
    needs: [build-and-test, semantic-versioning]
    if: needs.semantic-versioning.outputs.new_release_published == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: List downloaded artifacts (Debug)
      run: |
        find artifacts -type f | sort

    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.semantic-versioning.outputs.new_version }}
        name: Release v${{ needs.semantic-versioning.outputs.new_version }}
        body: ${{ needs.semantic-versioning.outputs.changelog }}
        files: artifacts/**/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-cargo-version:
    needs: [semantic-versioning, release]
    if: needs.semantic-versioning.outputs.new_release_published == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        
    - name: Pull latest changes
      run: git pull origin master

    - name: Update version in Cargo.toml
      run: |
        sed -i "s/^version = \".*\"/version = \"${{ needs.semantic-versioning.outputs.new_version }}\"/" Cargo.toml

    - name: Commit and push changes
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: "chore(release): update version to ${{ needs.semantic-versioning.outputs.new_version }} [skip ci]"
        file_pattern: Cargo.toml
        push_options: '--force'

  publish-to-crates-io:
    needs: [semantic-versioning, update-cargo-version]
    if: needs.semantic-versioning.outputs.new_release_published == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: master
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Pull latest changes
      run: git pull origin master

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ env.RUST_VERSION }}

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - name: Check for uncommitted changes
      run: git status

    - name: Add Cargo.lock to .gitignore if needed
      run: |
        if ! grep -q "Cargo.lock" .gitignore; then
          echo "Cargo.lock" >> .gitignore
          git add .gitignore
          git commit -m "chore: add Cargo.lock to .gitignore [skip ci]"
        fi

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }} --allow-dirty
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
